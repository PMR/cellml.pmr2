----------------------
CellML Code Generation
----------------------

CellML API v1.6 introduced a way to generate code in different languages
based on an input XML file customized for that specific language.  This
results in changes that require a more advance viewer.

Since we are demonstrating the display of the generated code, we defined
and registered a dummy code annotator in the tests module; here we 
invoke it for testing.
::

    >>> import zope.component
    >>> from pmr2.app.exposure.browser import ExposureFileAnnotatorForm
    >>> from pmr2.app.tests.base import TestRequest
    >>> filectx = self.exposure_file1
    >>> request = TestRequest(
    ...     form={
    ...         'form.widgets.annotators': [u'dummy_code'],
    ...         'form.buttons.apply': 1,
    ...     })
    >>> view = ExposureFileAnnotatorForm(filectx, request)
    >>> result = view()
    >>> result == ''
    True

That should have assigned the dummy values to the note.
::

    >>> request = TestRequest()
    >>> view = zope.component.queryMultiAdapter(
    ...     (filectx, request), name='dummy_code')
    >>> view = view.form_instance
    >>> print view()
    <h1>Generated Code</h1> 
    <p>The following are code that had been generated.</p> 
    <ul> 
    <li> 
      <a href="http://.../@@dummy_code/C">C</a> 
    </li> 
    <li> 
      <a href="http://.../@@dummy_code/Python">Python</a> 
    </li> 
    </ul>

Traversing the subpath should return a valid page with our code.  Since
the wrapper doesn't work within here, we have to manually invoke the 
methods within the form_instance to update and generate the output.
::

    >>> view = zope.component.queryMultiAdapter(
    ...     (filectx, request), name='dummy_code')
    >>> view.traverse_subpath.extend(['C'])
    >>> view.form_instance.update()
    >>> result = view.form_instance()
    >>> 'printf("this is a test\\n");' in result
    True
    >>> 'sh_c' in result
    True
 
Appending the raw to the subpath should return just the code
::

    >>> view = zope.component.queryMultiAdapter(
    ...     (filectx, request), name='dummy_code')
    >>> view.traverse_subpath.extend(['C', 'raw'])
    >>> view.form_instance.update()
    >>> result = view.form_instance()
    >>> result == 'printf("this is a test\\n");' 
    True
 
Having extra elements will result in not found
::

    >>> view = zope.component.queryMultiAdapter(
    ...     (filectx, request), name='dummy_code')
    >>> view.traverse_subpath.extend(['C', 'raw', 'raw'])
    >>> view.form_instance.update()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

As well as missing the language code (or just another case of unknown
language)
::

    >>> view = zope.component.queryMultiAdapter(
    ...     (filectx, request), name='dummy_code')
    >>> view.traverse_subpath.extend(['raw'])
    >>> view.form_instance.update()
    Traceback (most recent call last):
    ...
    HTTPNotFound: 404 Not Found
    ...

A different but valid subpath will return the code.
::

    >>> view = zope.component.queryMultiAdapter(
    ...     (filectx, request), name='dummy_code')
    >>> view.traverse_subpath.extend(['Python'])
    >>> view.form_instance.update()
    >>> result = view.form_instance()
    >>> 'print "this is a test"' in result
    True
    >>> 'sh_python' in result
    True
